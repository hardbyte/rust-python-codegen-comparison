'''
Generated Python client for reflect_api_demo_client.

DO NOT MODIFY THIS FILE MANUALLY.
This file is automatically generated by ReflectAPI.
'''

from __future__ import annotations


# Standard library imports
from datetime import datetime
from enum import Enum
from typing import Annotated, Any, Generic, Optional, TypeVar, Union

# Third-party imports
from pydantic import BaseModel, ConfigDict

# Runtime imports
from reflectapi_runtime import AsyncClientBase, ApiResponse
from reflectapi_runtime import ReflectapiEmpty
from reflectapi_runtime import ReflectapiInfallible


class SharedModelsAccountStatus(str, Enum):
    """Generated enum."""


    ACTIVE = "active"
    INVITED = "invited"
    SUSPENDED = "suspended"


class SharedModelsRole(str, Enum):
    """Generated enum."""


    ADMIN = "admin"
    EDITOR = "editor"
    VIEWER = "viewer"


class SharedModelsTheme(str, Enum):
    """Generated enum."""


    LIGHT = "light"
    DARK = "dark"
    SYSTEM = "system"


class SharedModelsApiError(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    code: str
    message: str
    detail: str | None = None


class SharedModelsHealthStatus(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    status: str
    checked_at: datetime
    region: str | None = None


class SharedModelsPreferences(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    theme: SharedModelsTheme
    timezone: str | None = None
    last_login_at: datetime | None = None


class SharedModelsCreateUserRequest(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    username: str
    email: str
    roles: list[SharedModelsRole] | None = None
    timezone: str | None = None


class ReflectServerGetUserRequest(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    id: int


class SharedModelsUser(BaseModel):
    """Generated data model."""

    model_config = ConfigDict(extra="ignore", populate_by_name=True)

    id: int
    username: str
    email: str
    created_at: datetime
    roles: list[SharedModelsRole] | None = None
    status: SharedModelsAccountStatus
    active: bool
    preferences: SharedModelsPreferences | None = None


class AsyncHealthClient:
    """Async client for health operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def get(
        self,
    ) -> ApiResponse[SharedModelsHealthStatus]:
        """Get server health metadata

        Returns:
            ApiResponse[SharedModelsHealthStatus]: Response containing SharedModelsHealthStatus data
        """
        path = "/health.get"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "GET",
            path,
            params=params if params else None,
            response_model=SharedModelsHealthStatus,
)


class AsyncUserClient:
    """Async client for user operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def create(
        self,
        data: Optional[SharedModelsCreateUserRequest] = None,
    ) -> ApiResponse[SharedModelsUser]:
        """Create a new user with validation

        Args:
            data: Request data for the create operation.

        Returns:
            ApiResponse[SharedModelsUser]: Response containing SharedModelsUser data
        """
        path = "/user.create"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=SharedModelsUser,
)


    async def get(
        self,
        data: Optional[ReflectServerGetUserRequest] = None,
    ) -> ApiResponse[SharedModelsUser]:
        """Fetch a single user by id

        Args:
            data: Request data for the get operation.

        Returns:
            ApiResponse[SharedModelsUser]: Response containing SharedModelsUser data
        """
        path = "/user.get"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "POST",
            path,
            params=params if params else None,
            json_model=data,
            response_model=SharedModelsUser,
)


class AsyncUsersClient:
    """Async client for users operations."""

    def __init__(self, client: AsyncClientBase) -> None:
        self._client = client


    async def list(
        self,
    ) -> ApiResponse[list[SharedModelsUser]]:
        """List all users with profile metadata

        Returns:
            ApiResponse[list[SharedModelsUser]]: Response containing list[SharedModelsUser] data
        """
        path = "/users.list"

        params: dict[str, Any] = {}

        return await self._client._make_request(
            "GET",
            path,
            params=params if params else None,
            response_model=list[SharedModelsUser],
)


class AsyncClient(AsyncClientBase):
    """Async client for the API."""

    def __init__(
        self,
        base_url: str,
        **kwargs: Any,
    ) -> None:
        super().__init__(base_url, **kwargs)

        self.health = AsyncHealthClient(self)

        self.user = AsyncUserClient(self)

        self.users = AsyncUsersClient(self)


# External type definitions
StdNumNonZeroU32 = Annotated[int, "Rust NonZero u32 type"]
StdNumNonZeroU64 = Annotated[int, "Rust NonZero u64 type"]
StdNumNonZeroI32 = Annotated[int, "Rust NonZero i32 type"]
StdNumNonZeroI64 = Annotated[int, "Rust NonZero i64 type"]

# Rebuild models to resolve forward references
try:
    ReflectServerGetUserRequest.model_rebuild()
    SharedModelsAccountStatus.model_rebuild()
    SharedModelsApiError.model_rebuild()
    SharedModelsCreateUserRequest.model_rebuild()
    SharedModelsHealthStatus.model_rebuild()
    SharedModelsPreferences.model_rebuild()
    SharedModelsRole.model_rebuild()
    SharedModelsTheme.model_rebuild()
    SharedModelsUser.model_rebuild()
except AttributeError:
    # Some types may not have model_rebuild method
    pass

# Factory classes (generated after model rebuild to avoid forward references)
